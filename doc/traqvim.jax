*traqvim.txt*	日本語ヘルプ

Author  : kamecha
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
目次						*traqvim-contents*

概要				|traqvim-introduction|
使い方				|traqvim-usage|
インターフェイス		|traqvim-interface|
  変数				  |traqvim-variables|
  コマンド			  |traqvim-commands|
  キーマッピング		  |traqvim-keymappings|
  関数				  |traqvim-functions|
TODO				|traqvim-todo|
更新履歴			|traqvim-changelog|


==============================================================================
概要						*traqvim-introduction*

*traqvim* はtraQのVim/Neovimクライアント

最新版:
https://github.com/kamecha/traqVimPractice


==============================================================================
使い方						*traqvim-usage*

始めにOAuth2を通してtraQへのアクセストークンを取得します。
`:Traq token setup`を使用するとアプリがlocalhost:8000で待機するため、
ブラウザ等でlocalhost:8000/oauth2へアクセスします。
(open-browser.vimプラグインが認識されている場合自動でアクセスします)
認証画面で認証を行うと、トークンがデフォルトでは~/.config/traqに保存されます。

==============================================================================
インターフェイス				*traqvim-interface*

------------------------------------------------------------------------------
変数						*traqvim-variables*

		*g:traqvim#token_file_path*
g:traqvim#token_file_path
	OAuth2認証の後、取得するトークンを保存するファイルへのパス
	Default: "~/.config/traq/token.json"

------------------------------------------------------------------------------
コマンド					*traqvim-commands*

						*:Traq*
:Traq {command} {args}
	{command}に対応するコマンドを実行します。

						*:Traq-token*
:Traq token {args}
	OAuth2認証で取得されるtokenに対する操作を行います。

	対応している引数

	setup
		トークンを取得するためOAuth2認証を行います。
	delete
		トークンファイルを削除します。

						*:Traq-channel*
:Traq channel {args}
	traQのチャンネルに対する操作を行います。

	対応している引数

	open {args}
		引数のチャンネルを現在のバッファで開きます。
	home
		ホームチャンネルを現在のバッファで開きます。
	reload
		現在のバッファに表示されているチャンネルの最新メッセージを取得します。
	forwad
		現在表示されているバッファのチャンネルの次のメッセージを取得します。
	back
		現在表示されているバッファのチャンネルの前のメッセージを取得します。

						*:Traq-activity*
:Traq activity {args}
	traQのアクティビティに対する操作を行います。

	対応している引数

	open
		アクティビティを現在のバッファで開きます。
	reload
		現在のバッファに表示されているアクティビティの最新メッセージを取得します。

						*:Traq-message*
:Traq message {args}
	traQのメッセージに対する操作を行います。

	対応している引数

	open
		現在のバッファに表示されているチャンネルに対するメッセージを生成するバッファを開きます。
	send
		メッセージバッファにおいて有効であり、メッセージを対象チャンネルに送信します。
	delete
		該当メッセージを削除します。
	edit
		該当メッセージを編集します。
	editApply
		編集中のメッセージを適用します。
	yankLink
		該当メッセージのリンクをヤンクします。
	yankMarkdown
		該当メッセージのリンクをマークダウン形式でヤンクします。

						*:Traq-pin*
:Traq pin {args}
	traQのピンに対する操作を行います。

	対応している引数

	create
		該当メッセージをピン留めします。
	remove
		該当メッセージのピンを解除します。

------------------------------------------------------------------------------
キーマッピング					*traqvim-keymappings*

<Plug>(traqvim-next)				    *<Plug>(traqvim-next)*
    次のメッセージへカーソルを移動させます

<Plug>(traqvim-prev)				    *<Plug>(traqvim-prev)*
    前のメッセージへカーソルを移動させます

<Plug>(traqvim-goto)				    *<Plug>(traqvim-goto)*
    メッセージに対応するチャンネルへ移動します

<Plug>(traqvim-motion-message)			    *<Plug>(traqvim-motion-message)*
    カーソル下の該当メッセージの始まり・終わりを選択します
    レイアウトで表示されるものが選択されます

<Plug>(traqvim-operator-message-yank-link)	    *<Plug>(traqvim-operator-message-yank-link)*
    該当メッセージのリンクをヤンクします

<Plug>(traqvim-operator-message-yank-markdown)	    *<Plug>(traqvim-operator-message-yank-markdown)*
    該当メッセージのリンクをマークダウン形式でヤンクします

<Plug>(traqvim-operator-message-delete)		    *<Plug>(traqvim-operator-message-delete)*
    該当メッセージを削除します

<Plug>(traqvim-operator-pin-toggle)		    *<Plug>(traqvim-operator-pin-toggle)*
    該当メッセージのピンをトグルします

------------------------------------------------------------------------------
レイアウト					*traqvim-channel-layout*

チャンネルの表示レイアウト

>
    亀茶 3/1/2023

    ほげほげ

    ---------
<

------------------------------------------------------------------------------
バッファ					*traqvim-buffer*

traqvim
    チャンネル、アクティビティの表示

traqvim-message
    メッセージの編集バッファ

==============================================================================
COMPLETION					*traqvim-completion*

    |ddc|と連携したスタンプの補完環境を提供します。
    スタンプの開始文字である`:`に反応しスタンプ候補を表示します。
    本プラグインを使用したメッセージ送信は特殊バッファを使用するため、
    |ddc-option-specialBufferCompletion|を設定する必要があります。
>
    " 例
    call ddc#custom#patch_global('sources', ['stamp'])
    call ddc#custom#patch_global('sourceOptions', {
        \   'stamp': {
        \     'mark': 'stamp'
        \   },
        \   '_': {
        \     'matchers': ['matcher_head'],
        \     'sorters': ['sorter_rank']
        \   },
        \ })
    call ddc#custom#patch_filetype('traqvim-message', 'specialBufferCompletion', v:true)
<

==============================================================================
FuzzyFinderSource				*ddu-source-traqvim*

    |ddu|と連携したチャンネル名のソースを提供します。
    チャンネルのメッセージをプレビューとして表示します。

>
    " 例
    call ddu#start({
	\ 'ui': 'ff',
	\ 'sources': [{'name': 'channel', 'params': {'type': 'unread'}}],
	\ 'kindOptions': {
	\	    'channel': {
	\		'defaultAction': 'open',
	\	    },
	\ },
	\ })
<

    |ddu|におけるkindと同様にチャンネル用の|kind|も提供しています。

open
    選択されたチャンネルを開きます。

    params:
	{command}:  open command.
		    (Default: "edit")


==============================================================================
PARAMS						*ddu-source-traqvim-params*

				*ddu-source-traqvim-param-type*
type		(string)
    チャンネルの種類を選択します。

    "all": 全てのチャンネル
    "subscribed": 購読チャンネル
    "unread": 未読チャンネル

    Default: "all"


==============================================================================
FAQ						*traqvim-faq*


FAQ 1:						|traqvim-faq-1|
    How to display image with sixel?

------------------------------------------------------------------------------
						*traqvim-faq-1*
Q: How to display image with sixel?

A: install `denops-sixel-view.vim` plugin. and you have to set function like
bellow.

https://github.com/gw31415/denops-sixel-view.vim

>
	" Clear the image like <C-l>
	function s:clear() abort
		call sixel_view#clear()
	endfunction

	function s:preview_img(fileId) abort
		" download the file and convert it to sixel data
		let sixel = denops#request("traqvim", "getFile", [a:fileId])
		call sixel_view#view_sixel(sixel['data'], 0, 0)
	endfunction

	function s:preview_cursor_img() abort
		let cursor_url = getline('.')
		let fileId = matchstr(cursor_url, 'https://q.trap.jp/files/\zs.*')
		call s:preview_img(fileId)
		" Close the image by moving the cursor
		autocmd CursorMoved,BufLeave <buffer> ++once call s:clear()
	endfunction

	function s:traqvim_setting()
		nnoremap <buffer><silent> K
					\ <Cmd>call <SID>preview_cursor_img()<CR>
	endfunction

	autocmd FileType traqvim call s:traqvim_setting()
<

==============================================================================
TODO						*traqvim-todo*



==============================================================================
更新履歴					*traqvim-changelog*


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
